{"version":3,"file":"use-store.showcase.js","sources":["../src/hooks/use-store/use-store.js","../src/hooks/use-store/use-store.showcase.js"],"sourcesContent":["import { useState, useEffect } from \"atomico\";\n\nlet eventTypeUpdate = \"update\";\n\n/**\n * If you use a function you can apply a property\n * calculation strategy using getter\n * @property {Function|Object} initialState - defines the initial state.\n * @example\n * let createInitialState = (store)=>({\n *  fullName(){\n *       return this.fistName + \" \" + this.lastName;\n *  }\n * })\n * @returns {Store}\n */\nexport function createStore(initialState) {\n  let store = new EventTarget();\n\n  let state =\n    typeof initialState == \"function\"\n      ? initialState(store)\n      : { ...initialState };\n\n  let chunkUpdate;\n\n  store.state = new Proxy(state, {\n    set(target, prop, value) {\n      if (target[prop] != value) {\n        // Group updates into a single event\n        if (!chunkUpdate) {\n          chunkUpdate = {};\n          queueMicrotask(() => {\n            let detail = chunkUpdate;\n            chunkUpdate = false;\n            store.dispatchEvent(new CustomEvent(eventTypeUpdate, { detail }));\n          });\n        }\n        if (chunkUpdate) {\n          chunkUpdate[prop] = true;\n        }\n\n        target[prop] = value;\n      }\n      return true;\n    },\n  });\n\n  store.onUpdate = (prop, callback) => {\n    let subscribe = ({ detail }) =>\n      (prop == \"*\" || prop in detail) && callback(store.state);\n\n    store.addEventListener(eventTypeUpdate, subscribe);\n\n    return () => store.removeEventListener(eventTypeUpdate, subscribe);\n  };\n\n  store.update = (props) => Object.assign(store.state, props);\n\n  return store;\n}\n\nexport function useStore(store, prop = \"*\") {\n  let [, setState] = useState(0);\n\n  useEffect(() => store.onUpdate(prop, () => setState((state) => state + 1)), [\n    store,\n  ]);\n  return store.state;\n}\n\n/**\n * @typedef Store\n * @property {Object} state - Concurrent state\n * @property {(prop:string,callback:Function)=>void} onUpdate - listen for changes associated with a state property\n * @property {(props:Object)=>Object} update - update one or more properties using an object\n */\n","import { h, customElement, Any } from \"atomico\";\r\nimport { createStore, useStore } from \"./use-store\";\r\nexport { render } from \"atomico\";\r\n\r\nlet store = createStore({ count: 0 });\r\n\r\nconst UseStore1 = ({ store }) => {\r\n  let state = useStore(store);\r\n  return (\r\n    <host>\r\n      Component A <button onclick={() => (state.count += 1)}>Increment</button>\r\n      <strong> State : {JSON.stringify(state)}</strong>\r\n    </host>\r\n  );\r\n};\r\n\r\nconst UseStore2 = ({ store }) => {\r\n  let state = useStore(store);\r\n  return (\r\n    <host>\r\n      Component B <button onclick={() => (state.count -= 1)}>Decrement</button>\r\n      <strong> State : {JSON.stringify(state)}</strong>\r\n    </host>\r\n  );\r\n};\r\n\r\nUseStore1.props = UseStore2.props = {\r\n  store: Any,\r\n};\r\n\r\ncustomElement(\"use-store-1\", UseStore1);\r\ncustomElement(\"use-store-2\", UseStore2);\r\n\r\nexport default [\r\n  {\r\n    label: \"useStore\",\r\n    render() {\r\n      let removeListener = store.onUpdate((store) => {\r\n        console.log(store);\r\n      });\r\n      return (\r\n        <div>\r\n          <p>\r\n            The components are synchronized to the store given by the parent\r\n          </p>\r\n          <use-store-1 store={store}></use-store-1>\r\n          <br />\r\n          <use-store-2 store={store}></use-store-2>\r\n        </div>\r\n      );\r\n    },\r\n  },\r\n];\r\n"],"names":["useStore","store","prop","setState","useState","useEffect","onUpdate","state","initialState","chunkUpdate","EventTarget","Proxy","set","target","value","queueMicrotask","detail","dispatchEvent","CustomEvent","callback","subscribe","addEventListener","removeEventListener","update","props","Object","assign","createStore","count","UseStore1","h","onclick","JSON","stringify","UseStore2","Any","customElement","label","render","console","log"],"mappings":"mHA8DO,SAASA,EAASC,EAAOC,EAAO,UAC9BC,GAAYC,EAAS,UAE5BC,EAAU,IAAMJ,EAAMK,SAASJ,EAAM,IAAMC,EAAUI,GAAUA,EAAQ,IAAK,CAC1EN,IAEKA,EAAMM,MChEf,IAAIN,EDYG,SAAqBO,OAQtBC,EAPAR,EAAQ,IAAIS,YAEZH,EACqB,mBAAhBC,EACHA,EAAaP,GACb,IAAKO,UAIXP,EAAMM,MAAQ,IAAII,MAAMJ,EAAO,CAC7BK,IAAG,CAACC,EAAQX,EAAMY,KACZD,EAAOX,IAASY,IAEbL,IACHA,EAAc,GACdM,eAAe,SACTC,EAASP,EACbA,GAAc,EACdR,EAAMgB,cAAc,IAAIC,YAjCd,SAiC2C,CAAEF,OAAAA,QAGvDP,IACFA,EAAYP,IAAQ,GAGtBW,EAAOX,GAAQY,IAEV,KAIXb,EAAMK,SAAW,CAACJ,EAAMiB,SAClBC,EAAY,EAAGJ,OAAAA,MACR,KAARd,GAAeA,KAAQc,IAAWG,EAASlB,EAAMM,cAEpDN,EAAMoB,iBAlDY,SAkDsBD,GAEjC,IAAMnB,EAAMqB,oBApDD,SAoDsCF,IAG1DnB,EAAMsB,OAAUC,GAAUC,OAAOC,OAAOzB,EAAMM,MAAOiB,GAE9CvB,ECvDG0B,CAAY,CAAEC,MAAO,IAEjC,MAAMC,EAAY,EAAG5B,MAAAA,UACfM,EAAQP,EAASC,UAEnB6B,6BACcA,YAAQC,QAAS,IAAOxB,EAAMqB,OAAS,gBACnDE,4BAAkBE,KAAKC,UAAU1B,MAKjC2B,EAAY,EAAGjC,MAAAA,UACfM,EAAQP,EAASC,UAEnB6B,6BACcA,YAAQC,QAAS,IAAOxB,EAAMqB,OAAS,gBACnDE,4BAAkBE,KAAKC,UAAU1B,MAKvCsB,EAAUL,MAAQU,EAAUV,MAAQ,CAClCvB,MAAOkC,GAGTC,EAAc,cAAeP,GAC7BO,EAAc,cAAeF,GAE7B,MAAe,CACb,CACEG,MAAO,WACPC,SACuBrC,EAAMK,SAAUL,IACnCsC,QAAQC,IAAIvC,YAGZ6B,aACEA,+EAGAA,iBAAa7B,MAAOA,IACpB6B,aACAA,iBAAa7B,MAAOA"}