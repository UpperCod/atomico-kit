{"version":3,"file":"a-router.showcase.js","sources":["../src/hooks/use-router/src/location.js","../src/hooks/use-router/src/parse.js","../src/hooks/use-router/use-router.js","../src/components/a-router/a-router.js","../src/components/a-router/a-router.showcase.js"],"sourcesContent":["/**\r\n * @return {string} pathname\r\n */\r\nexport function getPathname() {\r\n  return location.pathname;\r\n}\r\n/**\r\n * Dispatch history a new pathname\r\n * @type {Redirect}\r\n */\r\nexport function redirect(pathname) {\r\n  if (pathname == getPathname()) return;\r\n  history.pushState({}, \"history\", pathname);\r\n  window.dispatchEvent(new PopStateEvent(\"popstate\"));\r\n}\r\n\r\nexport function subscribe(handler) {\r\n  window.addEventListener(\"popstate\", handler);\r\n  return () => window.removeEventListener(\"popstate\", handler);\r\n}\r\n","const FOLDERS = /([^\\/]+)/g;\r\nconst FOLDER = \"[^\\\\/]\";\r\nconst SPLIT = \"(?:\\\\/){0,1}\";\r\nconst PARAM = /^(:)(\\w+)(\\?|(\\.){3}){0,1}/;\r\nconst PARAMS_EMPTY = {};\r\nconst MEMO = {};\r\n\r\nexport function format(path) {\r\n  return path.replace(/(\\/){2,}/g, \"/\").replace(/([^\\/]+)\\/$/, \"$1\");\r\n}\r\n\r\nexport function join(a, b) {\r\n  let split = \"/\";\r\n  return format((a || split) + split + (b || split));\r\n}\r\n\r\nexport function parse(string) {\r\n  let folders = string.match(FOLDERS) || [\"\"];\r\n  let params = [];\r\n  let regexp = new RegExp(\r\n    \"^\" +\r\n      folders\r\n        .map(folder => {\r\n          let [string, param, field, type] = folder.match(PARAM) || [];\r\n          if (param) {\r\n            params.push(field);\r\n            if (type === \"...\") {\r\n              return `(.*)`;\r\n            } else if (type === \"?\") {\r\n              return `${SPLIT}(${FOLDER}*)`;\r\n            } else {\r\n              return `\\\\/(${FOLDER}+)`;\r\n            }\r\n          } else {\r\n            return `\\\\/(?:${folder\r\n              .replace(/(\\.|\\-)/g, \"\\\\$1\")\r\n              .replace(/\\*/g, FOLDER + \"+\")\r\n              .replace(/\\((?!\\?\\:)/g, \"(?:\")})`;\r\n          }\r\n        })\r\n        .join(\"\") +\r\n      \"$\",\r\n    \"i\"\r\n  );\r\n\r\n  return { regexp, params, logs: {} };\r\n}\r\n/**\r\n * permite comparar un patron de captura vs un ruta de entrada\r\n * @param {string} path - ruta de patron de captura\r\n * @param {string} value  - ruta de comparacion a patron\r\n * @return {array} - [ inRoute:boolean, params:object ];\r\n */\r\nexport function match(path, value) {\r\n  path = format(path);\r\n  value = format(value);\r\n  if (!MEMO[path]) {\r\n    MEMO[path] = parse(path);\r\n  }\r\n  let { regexp, params, logs } = MEMO[path];\r\n  if (logs[value]) {\r\n    return logs[value];\r\n  }\r\n  let vs = value.match(regexp);\r\n  return (logs[value] = [\r\n    vs ? true : false,\r\n    vs\r\n      ? vs.slice(1).reduce((next, value, index) => {\r\n          next[params[index] || index] = value;\r\n          return next;\r\n        }, {})\r\n      : PARAMS_EMPTY\r\n  ]);\r\n}\r\n","import { useState, useEffect, useCallback } from \"atomico\";\r\nimport { redirect, getPathname, subscribe } from \"./src/location\";\r\nimport { match, join } from \"./src/parse\";\r\n\r\nexport function useHistory() {\r\n  let pathname = getPathname();\r\n  let [, setState] = useState({ pathname });\r\n\r\n  useEffect(() => {\r\n    function handler() {\r\n      let pathname = getPathname();\r\n      setState(state => (state.pathname != pathname ? { pathname } : state));\r\n    }\r\n    return subscribe(handler);\r\n  }, []);\r\n  return [pathname, redirect];\r\n}\r\n\r\nexport function useMatchRoute(path) {\r\n  return match(path, getPathname());\r\n}\r\n\r\nexport function useRoute(path, parentPath) {\r\n  useHistory();\r\n  return useMatchRoute(join(parentPath, path));\r\n}\r\n\r\nexport function useRedirect(parentPath) {\r\n  return useCallback(\r\n    subPath =>\r\n      redirect(join(parentPath, typeof subPath == \"string\" ? subPath : \"\")),\r\n    [parentPath]\r\n  );\r\n}\r\n\r\nexport function useRouter(cases, parentPath) {\r\n  let def = \"default\";\r\n  let [pathname] = useHistory();\r\n  for (let key in cases) {\r\n    if (key != def) {\r\n      let [status, params] = match(join(parentPath, key), pathname);\r\n      if (status) return cases[key](params);\r\n    }\r\n  }\r\n  return cases[def]();\r\n}\r\n","import {\n  h,\n  customElement,\n  Any,\n  useRef,\n  useHost,\n  useEvent,\n  useEffect,\n  useState,\n} from \"atomico\";\n\nimport { useHistory } from \"../../hooks/use-router/use-router\";\nimport { match, join } from \"../../hooks/use-router/src/parse\";\nimport { redirect } from \"../../hooks/use-router/src/location\";\nimport { useLazy } from \"../../hooks/use-lazy/use-lazy\";\n\nconst ARouterProxy = ({ path }) => {\n  return (\n    <host\n      onclick={(event) => {\n        let { target } = event;\n        let href;\n        while (target) {\n          href = target.getAttribute(\"href\");\n          if (target.hasAttribute(\"ignore\")) return;\n          target = href ? 0 : target.parentElement;\n        }\n        event.preventDefault();\n        if (href) {\n          redirect(join(path, href));\n        }\n      }}\n    ></host>\n  );\n};\n\nconst ARouterCase = ({ src, path }) => {\n  let refHost = useHost();\n\n  let dispatchUpdatedARouterCase = useEvent(\"UpdatedARouterCase\", {\n    bubbles: true,\n    composed: true,\n  });\n\n  useEffect(() => {\n    let { current } = refHost;\n    let disconect;\n    dispatchUpdatedARouterCase((callback) => (disconect = callback));\n    return () => {\n      !current.isConnected && disconect();\n    };\n  }, [src, path]);\n\n  return <host></host>;\n};\n\nconst notFound = { src: () => Promise.resolve(() => <slot name=\"404\"></slot>) };\n\nconst ARouterSwitch = () => {\n  let [pathname] = useHistory();\n  let ref = useRef({});\n  let [routeState, setRouteState] = useState(notFound);\n\n  let [lazyState, LazyResult] = useLazy(\n    () =>\n      typeof routeState.src == \"string\"\n        ? import(routeState.src)\n        : routeState.src(),\n    routeState.src,\n    [routeState.src]\n  );\n\n  let chunkUpdate;\n  let chunkRemove;\n\n  let define = () => {\n    let select = notFound;\n    for (let path in ref.current) {\n      let { src, default: isDefault } = ref.current[path];\n      let [state, params] = match(path, pathname);\n      if (state || isDefault) {\n        select = { state, params, path, src, pathname };\n        if (!isDefault) break;\n      }\n    }\n    setRouteState((state) =>\n      state.pathname == select.pathname ? state : select\n    );\n  };\n  useEffect(define, [pathname]);\n  return (\n    <host\n      shadowDom\n      onUpdatedARouterCase={({ target, detail }) => {\n        let { path } = target;\n        ref.current[path] = target;\n        detail(() => {\n          delete ref.current[path];\n          if (!chunkRemove) {\n            chunkRemove = true;\n            queueMicrotask(define);\n          }\n        });\n        if (!chunkUpdate) {\n          chunkUpdate = true;\n          queueMicrotask(define);\n        }\n      }}\n    >\n      {lazyState == \"loading\" ? (\n        <slot name=\"loading\">{lazyState}</slot>\n      ) : lazyState == \"error\" ? (\n        <slot name=\"error\">{lazyState}</slot>\n      ) : lazyState == \"done\" ? (\n        <LazyResult {...routeState.params}></LazyResult>\n      ) : (\n        \"\"\n      )}\n    </host>\n  );\n};\n\nARouterCase.props = {\n  path: {\n    type: String,\n    reflect: true,\n  },\n  src: {\n    type: Any,\n  },\n  default: {\n    type: Boolean,\n  },\n};\n\nARouterProxy.props = {\n  path: {\n    type: String,\n    value: \"\",\n  },\n};\n\ncustomElement(\"a-router-switch\", ARouterSwitch);\ncustomElement(\"a-router-case\", ARouterCase);\ncustomElement(\"a-router-proxy\", ARouterProxy);\n","import { h } from \"atomico\";\r\nexport { render } from \"atomico\";\r\nimport \"./a-router\";\r\n\r\nconst demoResult = result => () =>\r\n  new Promise(resolve => setTimeout(resolve, 1000, { default: result }));\r\n\r\nconst result1 = demoResult(props => <h3>Home</h3>);\r\n\r\nconst result2 = demoResult(props => <h3>Config</h3>);\r\n\r\nconst result3 = demoResult(props => <h3>{JSON.stringify(props)}</h3>);\r\n\r\nexport default [\r\n  {\r\n    label: \"Ejemplo\",\r\n    render() {\r\n      return (\r\n        <a-router-proxy>\r\n          <p>\r\n            The import effect is emulated with a delay to show the use of the\r\n            loading slot\r\n          </p>\r\n          <nav>\r\n            <a style=\"margin:5px\" href=\"/\">\r\n              home\r\n            </a>\r\n            <a style=\"margin:5px\" href=\"/user\">\r\n              user\r\n            </a>\r\n            <a style=\"margin:5px\" href=\"/config\">\r\n              config\r\n            </a>\r\n          </nav>\r\n          <a-router-switch>\r\n            <a-router-case path=\"/\" src={result1}></a-router-case>\r\n            <a-router-case path=\"/user\" src={result2}></a-router-case>\r\n            <a-router-case path=\"/:any...\" src={result3}></a-router-case>\r\n            <h1 slot=\"loading\">loading...</h1>\r\n            <h1 slot=\"404\">404</h1>\r\n          </a-router-switch>\r\n        </a-router-proxy>\r\n      );\r\n    }\r\n  }\r\n];\r\n"],"names":["getPathname","location","pathname","redirect","history","pushState","window","dispatchEvent","PopStateEvent","FOLDERS","PARAM","PARAMS_EMPTY","MEMO","format","path","replace","match","value","string","folders","params","regexp","RegExp","map","folder","param","field","type","push","FOLDER","join","logs","parse","vs","slice","reduce","next","index","useHistory","setState","useState","useEffect","handler","addEventListener","removeEventListener","subscribe","state","ARouterProxy","h","onclick","event","href","target","getAttribute","hasAttribute","parentElement","preventDefault","ARouterCase","src","refHost","useHost","dispatchUpdatedARouterCase","useEvent","bubbles","composed","disconect","current","callback","isConnected","notFound","Promise","resolve","name","props","String","reflect","Any","default","Boolean","customElement","chunkUpdate","chunkRemove","ref","useRef","routeState","setRouteState","lazyState","LazyResult","useLazy","import","define","select","isDefault","shadowDom","onUpdatedARouterCase","detail","queueMicrotask","demoResult","result","setTimeout","result1","result2","result3","JSON","stringify","label","render","style","slot"],"mappings":"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"}