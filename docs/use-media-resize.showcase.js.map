{"version":3,"file":"use-media-resize.showcase.js","sources":["../src/hooks/use-media-resize/use-media-resize.js","../src/hooks/use-media-resize/use-media-resize.showcase.js"],"sourcesContent":["import { useEffect, useState } from \"atomico\";\r\n\r\nfunction getSizes(value) {\r\n  let sizes = { cases: [] };\r\n\r\n  value.split(/ *, */).forEach(value => {\r\n    let size = value.match(/([^\\s]+) +(\\d+)px/);\r\n    if (size) {\r\n      let [, value, number] = size;\r\n      sizes.cases.push([value, Number(number)]);\r\n    } else {\r\n      sizes.default = value;\r\n    }\r\n  });\r\n\r\n  sizes.cases.sort(([, a], [, b]) => (a > b ? 1 : -1));\r\n\r\n  return sizes;\r\n}\r\n\r\nexport function useMediaResize(value) {\r\n  let sizes = getSizes(value);\r\n\r\n  let [state, setState] = useState(() => [null, {}]);\r\n\r\n  state[2] = sizes;\r\n\r\n  useEffect(() => {\r\n    let observer = new ResizeObserver(\r\n      ([\r\n        {\r\n          contentRect: { width }\r\n        }\r\n      ]) => {\r\n        update(width);\r\n      }\r\n    );\r\n\r\n    observer.observe(state[1].current);\r\n\r\n    function update(width) {\r\n      let sizes = state[2];\r\n      if (\r\n        !sizes.cases.some(([value, px]) => {\r\n          if (px >= width) {\r\n            setState(([, ...state]) => [value, ...state]);\r\n            return true;\r\n          }\r\n        })\r\n      ) {\r\n        setState(([value, ...state]) => [sizes.default || value, ...state]);\r\n      }\r\n    }\r\n    return () => resizeObserver.unobserve(state.ref.current);\r\n  }, []);\r\n\r\n  return state;\r\n}\r\n","import { h, customElement } from \"atomico\";\r\nimport { useMediaResize } from \"./use-media-resize\";\r\nexport { render } from \"atomico\";\r\n\r\nconst Example1 = ({ src }) => {\r\n  const [state, ref] = useMediaResize(src);\r\n  return (\r\n    <host ref={ref} shadowDom>\r\n      <style>{`:host{display:block;width:100%}img{width:100%}`}</style>\r\n      <img src={state} />\r\n    </host>\r\n  );\r\n};\r\n\r\nExample1.props = {\r\n  src: String\r\n};\r\n\r\ncustomElement(\"use-media-resize-example-1\", Example1);\r\n\r\nexport default [\r\n  {\r\n    label: \"Example useMediaResize\",\r\n    render() {\r\n      const url = \"https://via.placeholder.com/\";\r\n      return (\r\n        <use-media-resize-example-1\r\n          src={`${url}1080x150, ${url}720x200 720px, ${url}520x300 520px, ${url}320x500 240px`}\r\n        ></use-media-resize-example-1>\r\n      );\r\n    }\r\n  }\r\n];\r\n"],"names":["useMediaResize","value","sizes","cases","split","forEach","size","match","number","push","Number","default","sort","a","b","getSizes","state","setState","useState","useEffect","ResizeObserver","contentRect","width","some","px","update","observe","current","resizeObserver","unobserve","ref","Example1","src","h","shadowDom","props","String","customElement","label","render","url"],"mappings":"4GAoBO,SAASA,EAAeC,OACzBC,EAnBN,SAAkBD,OACZC,EAAQ,CAAEC,MAAO,WAErBF,EAAMG,MAAM,SAASC,QAAQJ,QACvBK,EAAOL,EAAMM,MAAM,wBACnBD,EAAM,MACDL,EAAOO,GAAUF,EACxBJ,EAAMC,MAAMM,KAAK,CAACR,EAAOS,OAAOF,UAEhCN,EAAMS,QAAUV,IAIpBC,EAAMC,MAAMS,KAAK,GAAIC,KAAOC,KAAQD,EAAIC,EAAI,GAAK,GAE1CZ,EAIKa,CAASd,IAEhBe,EAAOC,GAAYC,EAAS,IAAM,CAAC,KAAM,YAE9CF,EAAM,GAAKd,EAEXiB,EAAU,KACO,IAAIC,eACjB,GAEIC,aAAeC,MAAAA,kBASLA,OACVpB,EAAQc,EAAM,GAEfd,EAAMC,MAAMoB,KAAK,EAAEtB,EAAOuB,SACrBA,GAAMF,SACRL,EAAS,MAAOD,KAAW,CAACf,KAAUe,KAC/B,KAIXC,EAAS,EAAEhB,KAAUe,KAAW,CAACd,EAAMS,SAAWV,KAAUe,IAhB5DS,CAAOH,KAIFI,QAAQV,EAAM,GAAGW,SAenB,IAAMC,eAAeC,UAAUb,EAAMc,IAAIH,UAC/C,IAEIX,ECpDT,MAAMe,EAAW,EAAGC,IAAAA,YACXhB,EAAOc,GAAO9B,EAAegC,UAElCC,UAAMH,IAAKA,EAAKI,cACdD,eAAS,kDACTA,SAAKD,IAAKhB,MAKhBe,EAASI,MAAQ,CACfH,IAAKI,QAGPC,EAAc,6BAA8BN,GAE5C,MAAe,CACb,CACEO,MAAO,yBACPC,eACQC,EAAM,sCAEVP,gCACED,IAAM,GAAEQ,cAAgBA,mBAAqBA,mBAAqBA"}